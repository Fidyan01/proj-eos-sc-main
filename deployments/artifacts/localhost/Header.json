{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "eosId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "startOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "imoNumber",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalID",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "vesselName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "jetty",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "terminalName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "traderName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "agent",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "status",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "berthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "vesselSize",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP1",
              "name": "p1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalStatus",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "unberthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom2",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo2",
                  "type": "string"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP2",
              "name": "p2",
              "type": "tuple"
            }
          ],
          "internalType": "struct IHeaderTracking.TxnHeader[]",
          "name": "infoArray",
          "type": "tuple[]"
        }
      ],
      "name": "batchStoreHeader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "batchVerifyHeader",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eosId",
          "type": "uint32"
        }
      ],
      "name": "getListTxnHeader",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "eosId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "startOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "imoNumber",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalID",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "vesselName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "jetty",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "terminalName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "traderName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "agent",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "status",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "berthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "vesselSize",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP1",
              "name": "p1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalStatus",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "unberthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom2",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo2",
                  "type": "string"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP2",
              "name": "p2",
              "type": "tuple"
            }
          ],
          "internalType": "struct IHeaderTracking.TxnHeader[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eosId",
          "type": "uint32"
        }
      ],
      "name": "getListTxnHeaderHashById",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "getTxnHeaderInformation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "eosId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "startOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endOfTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "imoNumber",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalID",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "vesselName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "jetty",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "terminalName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "traderName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "agent",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "status",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "berthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "vesselSize",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP1",
              "name": "p1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "arrivalStatus",
                  "type": "string"
                },
                {
                  "internalType": "uint32",
                  "name": "unberthingPilotageID",
                  "type": "uint32"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationFrom2",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "pilotageLocationTo2",
                  "type": "string"
                }
              ],
              "internalType": "struct IHeaderTracking.TxnHeaderP2",
              "name": "p2",
              "type": "tuple"
            }
          ],
          "internalType": "struct IHeaderTracking.TxnHeader",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "txnHeaderHashId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "txnHeaderInformation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eosId",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "startOfTransaction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endOfTransaction",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imoNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "arrivalID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "vesselName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "jetty",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "terminalName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "traderName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "agent",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "status",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "berthingPilotageID",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "vesselSize",
              "type": "uint32"
            }
          ],
          "internalType": "struct IHeaderTracking.TxnHeaderP1",
          "name": "p1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "pilotageLocationFrom1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pilotageLocationTo1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "arrivalStatus",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "unberthingPilotageID",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "pilotageLocationFrom2",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pilotageLocationTo2",
              "type": "string"
            }
          ],
          "internalType": "struct IHeaderTracking.TxnHeaderP2",
          "name": "p2",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb36d66c288bd2be80108150032fff25937fc5315ae5478ddfca199f6aeee57d7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2537932",
    "logsBloom": "0x
    "blockHash": "0x399cb9cebfbe1a2d741400d9ab240c858138c962cbed3028220ab58b5f08a2d8",
    "transactionHash": "0xb36d66c288bd2be80108150032fff25937fc5315ae5478ddfca199f6aeee57d7",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2537932",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d93c48a3c6414db275e3e4c44530b229",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imoNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vesselName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jetty\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terminalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"berthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesselSize\",\"type\":\"uint32\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP1\",\"name\":\"p1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalStatus\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"unberthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo2\",\"type\":\"string\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP2\",\"name\":\"p2\",\"type\":\"tuple\"}],\"internalType\":\"struct IHeaderTracking.TxnHeader[]\",\"name\":\"infoArray\",\"type\":\"tuple[]\"}],\"name\":\"batchStoreHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"batchVerifyHeader\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"}],\"name\":\"getListTxnHeader\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imoNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vesselName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jetty\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terminalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"berthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesselSize\",\"type\":\"uint32\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP1\",\"name\":\"p1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalStatus\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"unberthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo2\",\"type\":\"string\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP2\",\"name\":\"p2\",\"type\":\"tuple\"}],\"internalType\":\"struct IHeaderTracking.TxnHeader[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"}],\"name\":\"getListTxnHeaderHashById\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getTxnHeaderInformation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imoNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vesselName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jetty\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terminalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"berthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesselSize\",\"type\":\"uint32\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP1\",\"name\":\"p1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalStatus\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"unberthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo2\",\"type\":\"string\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP2\",\"name\":\"p2\",\"type\":\"tuple\"}],\"internalType\":\"struct IHeaderTracking.TxnHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txnHeaderHashId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"txnHeaderInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eosId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"startOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endOfTransaction\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imoNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vesselName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jetty\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terminalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traderName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"berthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesselSize\",\"type\":\"uint32\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP1\",\"name\":\"p1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"arrivalStatus\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"unberthingPilotageID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationFrom2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pilotageLocationTo2\",\"type\":\"string\"}],\"internalType\":\"struct IHeaderTracking.TxnHeaderP2\",\"name\":\"p2\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Header.sol\":\"Header\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Header.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./interfaces/IHeaderTracking.sol\\\";\\n\\ncontract Header is IHeaderTracking {\\n\\n    address public operatorAddress;\\n    mapping(bytes32 => TxnHeader) public txnHeaderInformation;\\n    mapping(uint32 => bytes32[]) public txnHeaderHashId;\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operatorAddress, \\\"Only operator\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        operatorAddress = msg.sender;\\n    }\\n\\n    // set operator\\n    // operator contract is proxy contract. We only accept the proxy contract can call addEventSubStageTimestamps function.\\n\\n    function setOperator(address newOperator) public onlyOperator {\\n        operatorAddress = newOperator;\\n    }\\n\\n    // get list header by hashid\\n    // The function `getListTxnHeaderHashById` is a getter function that returns an array of `bytes32` values. It takes an input parameter `eosId` of type `uint32`.\\n    function getListTxnHeaderHashById(uint32 eosId) external override view returns (bytes32[] memory) {\\n        return txnHeaderHashId[eosId];\\n    }\\n\\n    // get list header by eosid\\n    // The `getListTxnHeader` function is a getter function that returns an array of `TxnHeader` values. It takes an input parameter `eosId` of type `uint32`.\\n    function getListTxnHeader(uint32 eosId) external override view returns (TxnHeader[] memory) {\\n        bytes32[] memory hashIds = txnHeaderHashId[eosId];\\n        uint256 len = hashIds.length;\\n        TxnHeader[] memory response = new TxnHeader[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            response[i] = txnHeaderInformation[hashIds[i]];\\n        }\\n\\n        return response;\\n    }\\n\\n    // batch store header\\n    //The `batchStoreHeader` function is used to store multiple headers in the `Header` contract. It takes two input parameters: `data` of type `bytes32[]` and `infoArray` of type `TxnHeader[]`.\\n    function batchStoreHeader(bytes32[] memory data, TxnHeader[] memory infoArray) external override onlyOperator {\\n        require(\\n            data.length > 0 && data.length == infoArray.length,\\n            \\\"Incorrect input!!!, data length should be more than 0 and 2 arrays will have to be equal in length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (txnHeaderInformation[data[i]].p1.startOfTransaction == 0) {\\n                txnHeaderHashId[infoArray[i].p1.eosId].push(data[i]);\\n                txnHeaderInformation[data[i]] = infoArray[i];\\n            }\\n        }\\n    }\\n\\n    // batch verify header\\n    // The `batchVerifyHeader` function is a view function that takes an array of `bytes32` values as input and returns an array of boolean values.\\n    function batchVerifyHeader(bytes32[] memory data) external override view returns (bool[] memory) {\\n        bool[] memory output = new bool[](data.length);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            output[i] = txnHeaderInformation[data[i]].p1.startOfTransaction > 0;\\n        }\\n        return output;\\n    }\\n\\n    // get header by hashID\\n    //The `getTxnHeaderInformation` function is a public function that takes a `bytes32` parameter `data` and returns a `TxnHeader` value.\\n    function getTxnHeaderInformation(bytes32 data) external override returns (TxnHeader memory) {\\n        return txnHeaderInformation[data];\\n    }\\n}\\n\",\"keccak256\":\"0x1af186eee37578d46223277205c812ae487b0ee18e2e255c5f178311f81c2705\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IHeaderTracking.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\ninterface IHeaderTracking {\\n    struct TxnHeaderP1 {\\n        uint32 eosId;\\n        uint256 startOfTransaction;\\n        uint256 endOfTransaction;\\n        string imoNumber;\\n        string arrivalID;\\n        string vesselName;\\n        string jetty;\\n        string terminalName;\\n        string traderName;\\n        string agent;\\n        string status;\\n        uint32 berthingPilotageID;\\n        uint32 vesselSize;\\n    }\\n\\n    struct TxnHeaderP2 {\\n        string pilotageLocationFrom1;\\n        string pilotageLocationTo1;\\n        string arrivalStatus;\\n        uint32 unberthingPilotageID;\\n        string pilotageLocationFrom2;\\n        string pilotageLocationTo2;\\n    }\\n\\n    struct TxnHeader {\\n        TxnHeaderP1 p1;\\n        TxnHeaderP2 p2;\\n    }\\n\\n    function getListTxnHeaderHashById(uint32 eosId) external view returns (bytes32[] memory);\\n    function getListTxnHeader(uint32 eosId) external view returns (TxnHeader[] memory);\\n    function batchStoreHeader(bytes32[] memory data, TxnHeader[] memory infoArray) external;\\n    function batchVerifyHeader(bytes32[] memory data) external view returns (bool[] memory);\\n    function getTxnHeaderInformation(bytes32 data) external returns (TxnHeader memory);\\n}\\n\",\"keccak256\":\"0x0c56efe64eb949f76b6de4660f963b912f8fc2ac407f53c8f48ed3aec83aa747\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1106,
        "contract": "contracts/Header.sol:Header",
        "label": "operatorAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1111,
        "contract": "contracts/Header.sol:Header",
        "label": "txnHeaderInformation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(TxnHeader)2458_storage)"
      },
      {
        "astId": 1116,
        "contract": "contracts/Header.sol:Header",
        "label": "txnHeaderHashId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(TxnHeader)2458_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IHeaderTracking.TxnHeader)",
        "numberOfBytes": "32",
        "value": "t_struct(TxnHeader)2458_storage"
      },
      "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TxnHeader)2458_storage": {
        "encoding": "inplace",
        "label": "struct IHeaderTracking.TxnHeader",
        "members": [
          {
            "astId": 2454,
            "contract": "contracts/Header.sol:Header",
            "label": "p1",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TxnHeaderP1)2438_storage"
          },
          {
            "astId": 2457,
            "contract": "contracts/Header.sol:Header",
            "label": "p2",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(TxnHeaderP2)2451_storage"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(TxnHeaderP1)2438_storage": {
        "encoding": "inplace",
        "label": "struct IHeaderTracking.TxnHeaderP1",
        "members": [
          {
            "astId": 2413,
            "contract": "contracts/Header.sol:Header",
            "label": "eosId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2415,
            "contract": "contracts/Header.sol:Header",
            "label": "startOfTransaction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2417,
            "contract": "contracts/Header.sol:Header",
            "label": "endOfTransaction",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2419,
            "contract": "contracts/Header.sol:Header",
            "label": "imoNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2421,
            "contract": "contracts/Header.sol:Header",
            "label": "arrivalID",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2423,
            "contract": "contracts/Header.sol:Header",
            "label": "vesselName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2425,
            "contract": "contracts/Header.sol:Header",
            "label": "jetty",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2427,
            "contract": "contracts/Header.sol:Header",
            "label": "terminalName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 2429,
            "contract": "contracts/Header.sol:Header",
            "label": "traderName",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 2431,
            "contract": "contracts/Header.sol:Header",
            "label": "agent",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 2433,
            "contract": "contracts/Header.sol:Header",
            "label": "status",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2435,
            "contract": "contracts/Header.sol:Header",
            "label": "berthingPilotageID",
            "offset": 0,
            "slot": "11",
            "type": "t_uint32"
          },
          {
            "astId": 2437,
            "contract": "contracts/Header.sol:Header",
            "label": "vesselSize",
            "offset": 4,
            "slot": "11",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(TxnHeaderP2)2451_storage": {
        "encoding": "inplace",
        "label": "struct IHeaderTracking.TxnHeaderP2",
        "members": [
          {
            "astId": 2440,
            "contract": "contracts/Header.sol:Header",
            "label": "pilotageLocationFrom1",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2442,
            "contract": "contracts/Header.sol:Header",
            "label": "pilotageLocationTo1",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2444,
            "contract": "contracts/Header.sol:Header",
            "label": "arrivalStatus",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2446,
            "contract": "contracts/Header.sol:Header",
            "label": "unberthingPilotageID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 2448,
            "contract": "contracts/Header.sol:Header",
            "label": "pilotageLocationFrom2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2450,
            "contract": "contracts/Header.sol:Header",
            "label": "pilotageLocationTo2",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}